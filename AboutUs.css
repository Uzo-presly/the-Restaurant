* {
  box-sizing: border-box;

  text-decoration: none;
}

@import url("https://fonts.googleapis.com/css2?family=Lobster&display=swap");

body {
  background-color: rgba(251, 255, 0, 0.158);
  padding: 5px 5px;
  margin: 10px;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  text-align: center;
}

.gallery div {
  padding: 0px 5px;
  background-repeat: no-repeat;
  width: 100%;
  height: auto;
}

/* .deliciousBox {
  background-size: cover;
} */
/* inline text for paragraph styling <p style="font-size:48px;" >Foodie Land</p> */
.foodielandText {
  font-family: "Lobster", sans-serif;
  font-weight: 400;
  font-style: normal;
}
/* To center an image, set left and right margin to auto 
and make it into a block element: */
.recipeSamples > div {
  background-size: contain;
  /* display: block; */
  margin-left: auto;
  margin-right: auto;
  max-width: 100%;
}
.tastyRecipeSamples > div {
  background-size: contain;
  /* display: block; */
  margin-left: auto;
  margin-right: auto;
  width: 100%;
}
/* .paginatingButtons :hover {
  background-color: orange;
} */
.paginatingButtons a {
  border-radius: 5px;
  border: 1px solid #ddd; /* Gray */
  color: black;
  display: inline-block;
  padding: 8px 16px;
  margin: 0px 5px 20px 0px;
  text-decoration: none;
  line-height: 1.2rem;
}

.paginatingButtons a.active {
  border-radius: 5px;
  background-color: #070707;
  color: white;
}

.paginatingButtons a:hover:not(.active) {
  /* scale: 1; */
  background-color: #6d5b5b;
  color: white;
}
.paginatingButtons a:first-child {
  border-top-left-radius: 5px;
  border-bottom-left-radius: 5px;
}

.paginatingButtons a:last-child {
  border-top-right-radius: 5px;
  border-bottom-right-radius: 5px;
}
nav {
  display: none;
}
ul {
  max-width: fit-content;
  list-style-type: none;
  margin: 0;
  padding: 0;
}
/* inside the LI called dropdown is a hanburger-image displayed as block 
  we are using it to represent our LI for users to see its postion on screen*/
li.dropdown {
  display: inline-block;
}
/* li a:hover, .dropdown:hover .dropbtn {
    background-color: red;
  } */

.dropdown-content {
  display: none;
  position: absolute;
  background-color: #d46e6e;
  max-width: 100px;
  box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.788);
  z-index: 0.5;
}
.dropdown-content a {
  color: rgb(59, 35, 2);
  padding: 5px 5px;
  text-decoration: dashed;
  display: block;
  text-align: right;
} /* when you hover the image representing the LI,
   let dropdown-content display as block */
.dropdown:hover .dropdown-content {
  display: block;
}
.dropdown-content a:hover {
  background-color: #f1f1f1;
}
#forDelicious{width: 100%;}
#deliciousBoxSection {width: 100%;
  border: 0.5px dashed whitesmoke;
  border-radius: 7.5%;
  background-size: cover;
  background-repeat: no-repeat;
}
/* the next settings is for  
when the screen-width is more than 450px,
let the divs in the sections flex
but do not flex the sections yet */
/* @media screen and (max-width: 600px) {
  .HambugerList {
    display: block;
  }
} */
#topsocialLinks a {
  margin: 0px 5px;
}
#menu a {
  margin: 0px 0px;
}

@media screen and (min-width: 450px) {
  body {
    background-color: white;
  }
  .forNav {
    width: 100%;
    background-color: #f5f0f0;
  }

  .HambugerList {
    display: none;
  }
  nav {
    width: 100%;
    display: flex;
    justify-content: space-between;
  }
  #menu {
    display: flex;
  }
  #menu a {
    margin: 0px 10px;
  }
  #topsocialLinks {
    display: flex;
    align-items: center;
  }
  #topsocialLinks a {
    margin: 0px 10px;
  }

  .recipeSamples {
    display: flex;
  }
  .tastyRecipeSamples {
    display: flex;
  }
  .clearfix {
    height: 200px;
  }
  #deliciousBoxSection {
    border-radius: 7.5%;
    max-width: 600px;
    height: 240px;
  }
  .footerFirstLine {
    margin: 20px;
    /* width: 100%; */
    display: flex;
    justify-content: space-between;
  }
  .footerFirstLine a {
    margin-right: 10px;
  }
  .footerSecondLine {
    /* width: 70%; */
    display: flex;
    justify-content: space-between;
  }
  .footerSecondLine a {
    margin: 0px 10px;
  }
  .forFooter {
    width: 100%;
  }
}

footer {
  width: 100%;
}
/* now when the minimum the screen can be is
700px; this implies that the screen is bigger
than 700px in width, then our section can flex */
@media screen and (min-width: 950px) {
  .forNav {
    width: 100%;
    line-height: 35px;
    background-color: #f5f0f0;
  }
  /* nav {display: flex; justify-content: space-between;} */
  section {
    display: flex;
  }
  p,
  h1,
  h2,
  h3,
  h4 {
    font-size: 1.3rem;
  }

  #deliciousBoxSection {
    width: 1300px;
    height: 450px;
    background-size: cover;
  }
  #forDelicious{width: 100%;}
  #foodielandTextBttm {
    position: relative;
    left: 100px;
  }
  .paginatingButtons a {
    border-radius: 8px;
    border: 1px solid #ddd; /* Gray */
    color: black;
    display: inline-block;
    padding: 8px 26px;
    margin: 0px 5px 60px 0px;
    text-decoration: none;
    line-height: 2rem;
  }
  .paginatingButtons a:hover:not(.active) {
    scale: 1.2;
    background-color: #d8adad;
    color: white;
  }
}
@media screen and (min-width: 1300px) {
  #deliciousBoxSection {
    max-width: 1280px;
    height: 420px;
    margin-bottom: 10px;
  }
}
/* <body>

<h2>What Can JavaScript Do? n this example is a description
that is not within SCRIPT TAG nd yet flips the gif-bulb ON and OFF</h2>
<p>JavaScript can change HTML attribute values.</p>
<p>In this case JavaScript changes the value of the src (source) attribute of an image.</p>
<button onclick="document.getElementById('myImage').src='pic_bulbon.gif'">Turn on the light</button>
<img id="myImage" src="pic_bulboff.gif" style="width:100px">
<button onclick="document.getElementById('myImage').src='pic_bulboff.gif'">Turn off the light</button>
</body>
</html>
<html>
<head>
<style>
.pagination {
  display: inline-block;
}

.pagination a {
  color: black;
  float: left;
  padding: 8px 16px;
  text-decoration: none;
}

.pagination a.active {
  background-color: #4CAF50;
  color: white;
}

.pagination a:hover:not(.active) {background-color: #ddd;}
</style>
</head>
<body>

<h2>Active and Hoverable Pagination</h2>

<p>Move the mouse over the numbers.</p>

<div class="pagination">
  <a href="#">&laquo;</a>
  <a href="#">1</a>
  <a class="active" href="#">2</a>
  <a href="#">3</a>
  <a href="#">4</a>
  <a href="#">5</a>
  <a href="#">6</a>
  <a href="#">&raquo;</a>
</div>

</body>
</html>

<head>
<style>
img.a {
  width: 200px;
  height: 400px;
  object-fit: none;
  object-position: 5px 10%;
  border: 5px solid red;
}
</style>
</head>
<body>

<h2>The object-position Property</h2>

<p>Resize the image to fit its content box, and position the image 5px from the left and 10% from the top inside the content box:</p>
<img class="a" src="paris.jpg" alt="Paris" width="400" height="300">

<h2>Original image:</h2>
<img src="paris.jpg" alt="Paris" width="400" height="300">

<p>Note: The object-position and object-fit properties are not supported in Internet Explorer/Edge 15 or earlier.</p>

</body>

<html>
<head>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
<script> 
$(document).ready(function(){
  $("#flip").click(function(){
    $("#panel").slideDown("slow");
  });
});
</script>
#panel is not displaying but with javascript shall side down its content
when #flip is clicked.
<style> 
#panel, #flip {
  padding: 5px;
  text-align: center;
  background-color: #e5eecc;
  border: solid 1px #c3c3c3;
}

#panel {
  padding: 50px;
  display: none;
}
</style>
</head>
<body>
 
<div id="flip">Click to slide down panel</div>
<div id="panel">Hello world!</div>

</body>
</html>

on a normal, gif should automatically flip their images-values 
however, when placed between onClick-buttons in javascript,
 they wait for clicks on the browser<html>
<body>

<h2>What Can JavaScript Do?</h2>
<p>JavaScript can change HTML attribute values.</p>
<p>In this case JavaScript changes the value of the src (source) attribute of an image.</p>
<button onclick="document.getElementById('myImage').src='pic_bulbon.gif'">Turn on the light</button>
this is the PHOTOgragh of the bulb when it is ON
<img id="myImage" src="pic_bulboff.gif" style="width:100px">
<button onclick="document.getElementById('myImage').src='pic_bulboff.gif'">Turn off the light</button>
this is the PHOTOgragh of the bulb when it is OFF
</body>
</html>

<p id="demo">JavaScript can hide HTML elements.</p>
<button type="button" onclick="document.getElementById('demo').style.display='none'">Click Me!</button>

document.getElementById("demo").style.fontSize = "35px";
<h1>animation-direction: alternate-reverse</h1>

<p>Plays the animation backwards first, then forwards:</p>
div {
  animation-direction: reverse;
}Plays the animation backwards:

<html>
<body>
check out the follwing interesting keyswords in javascript: like fillstroke etc
<h1>HTML5 Canvas shadowColor</h1>

<canvas id="myCanvas" width="300" height="150" style="border:1px solid grey">
Sorry, your browser does not support canvas.
</canvas>

<script>
const canvas = document.getElementById("myCanvas");
const ctx = canvas.getContext("2d");

// Shadow
ctx.shadowColor = "lightblue";
ctx.shadowOffsetX = 5;
ctx.shadowOffsetY = 5;

ctx.font = "50px Arial";

// Filled text
ctx.fillStyle = "purple";
ctx.fillText("Hello World",10,60);

// Stroked text
ctx.strokeStyle = "purple";
ctx.strokeText("Hello World",10,120);
</script>

</body>
</html>
<html>
<body>

<h2>JavaScript Comments are NOT Executed</h2>

<p id="demo"></p>

<script>
let x;
x = 5;
// x = 6; I will not be executed
document.getElementById("demo").innerHTML = x;
</script>

</body>
</html>
JavaScript Comments are NOT Executed
the answer gotten by javascript of x is: 5.

<html>
<body>
<h1>JavaScript Maps</h1>
<h2>The new Map Method()</h2>

<p>Creating a map from an array:</p>

<p id="demo"></p>

<script>
// Create a Map
const fruits = new Map([
  ["apples", 500],
  ["bananas", 300],
  ["oranges", 200]
]);

let numb = fruits.get("apples");
document.getElementById("demo").innerHTML = "There are " + numb + " apples.";
</script>

</body>
</html>

<!DOCTYPE html>
<html>
<head>
<style>
div.gallery {
  border: 1px solid #ccc;
}

div.gallery:hover {
  border: 1px solid #777;
}

div.gallery img {
  width: 100%;
  height: auto;
}

div.desc {
  padding: 15px;
  text-align: center;
}

* {
  box-sizing: border-box;
}

.responsive {
  padding: 0 6px;
  float: left;
  width: 24.99999%;
}

@media only screen and (max-width: 700px) {
  .responsive {
    width: 49.99999%;
    margin: 6px 0;
  }
}

@media only screen and (max-width: 500px) {
  .responsive {
    width: 100%;
  }
}

.clearfix:after {
  content: "";
  display: table;
  clear: both;
}
</style>
</head>
<body>

<h2>Responsive Image Gallery</h2>

<h4>Resize the browser window to see the effect.</h4>

<div class="responsive">
  <div class="gallery">
    <a target="_blank" href="img_5terre.jpg">
      <img src="img_5terre.jpg" alt="Cinque Terre" width="600" height="400">
    </a>
    <div class="desc">Add a description of the image here</div>
  </div>
</div>


<div class="responsive">
  <div class="gallery">
    <a target="_blank" href="img_forest.jpg">
      <img src="img_forest.jpg" alt="Forest" width="600" height="400">
    </a>
    <div class="desc">Add a description of the image here</div>
  </div>
</div>

<div class="responsive">
  <div class="gallery">
    <a target="_blank" href="img_lights.jpg">
      <img src="img_lights.jpg" alt="Northern Lights" width="600" height="400">
    </a>
    <div class="desc">Add a description of the image here</div>
  </div>
</div>

<div class="responsive">
  <div class="gallery">
    <a target="_blank" href="img_mountains.jpg">
      <img src="img_mountains.jpg" alt="Mountains" width="600" height="400">
    </a>
    <div class="desc">Add a description of the image here</div>
  </div>
</div>

<div class="clearfix"></div>

<div style="padding:6px;">
  <p>This example use media queries to re-arrange the images on different screen sizes: for screens larger than 700px wide, it will show four images side by side, for screens smaller than 700px, it will show two images side by side. For screens smaller than 500px, the images will stack vertically (100%).</p>
  <p>You will learn more about media queries and responsive web design later in our CSS Tutorial.</p>
</div>

</body>
</html>

    
<head>
<script>
function myFunction() {
  document.getElementById("demo").innerHTML = "Paragraph changed.";
}
</script>
</head>
<body>
<h2>Demo JavaScript in Head</h2>
<p id="demo">A Paragraph.</p>
<button type="button" onclick="myFunction()">Try it</button>
</body>
</html> 

Using innerHTML
To access an HTML element, JavaScript can use the document.getElementById(id) method.
The id attribute defines the HTML element. The innerHTML property defines the HTML content:
<html>
<body>

<h2>My First Web Page</h2>
<p>My First Paragraph.</p>

<p id="demo"></p>

<script>
document.getElementById("demo").innerHTML = 5 + 6;
</script>

</body>
</html> 
javascript adds it up so that on your browser is displayed the following:
My First Web Page
My First Paragraph.

11


<!DOCTYPE html>
<html>
<body>

<h2>The window.print() Method</h2>
<p>Click the button to print the current page.</p>
<button onclick="window.print()">Print this page</button>
</body>
</html>
<!DOCTYPE html>
<html>
<body>

<h2>JavaScript Statements</h2>

<p>A <b>JavaScript program</b> is a list of <b>statements</b> to be executed by a computer.</p>
<p id="demo"></p>
<script>
let x, y, z;  // Statement 1
x = 5;        // Statement 2
y = 6;        // Statement 3
z = x + y;    // Statement 4
document.getElementById("demo").innerHTML =
"The value of z is " + z + ".";  
</script>
</body>
</html>

JavaScript Statements
A JavaScript program is a list of statements to be executed by a computer.

The value of z is 11.

JavaScript Keywords
JavaScript statements often start with a keyword to identify the JavaScript action to be performed.

Our Reserved Words Reference lists all JavaScript keywords.

Here is a list of some of the keywords you will learn about in this tutorial:

Keyword	Description
var	        Declares a variable
let	        Declares a block variable
const	    Declares a block constant
if	        Marks a block of statements to be executed on a condition
switch	    Marks a block of statements to be executed in different cases
for	         Marks a block of statements to be executed in a loop
function	Declares a function
return  	Exits a function
try	        Implements error handling to a block of statements


let us have in our html file two empty P-tags that shall reveal 
smething coming from a linked javascript file When A Button Is Clcked
<html>
<body>
<h2>JavaScript Statements</h2>
<p>JavaScript code blocks are written between { and }</p>

<button type="button" onclick="firstTwoPtags()">Click Me!</button>

<p id="demo1"></p>
<p id="demo2"></p>
<script> ghggh.js</script>
</body>
</html>

in the linking javascript file
javascript shall by the getElement command display in the first two paragraphs
 the statements "Hello Dolly" and "How are You" as when we click on the button 
 whose onclick behaviour we named firstTwoPtags

<script>
function firstTwoPtags() {
  document.getElementById("demo1").innerHTML = "Hello Dolly!";
  document.getElementById("demo2").innerHTML = "How are you?";
}
  what we have just instruceted concerens the button
  can you sense the interraction between html and javascript
  in the display of the browser
</script>

on Browser
JavaScript Statements
JavaScript code blocks are written between { and }

Click Me!
Hello Dolly!

How are you?

ctx is just a variable name but mostly it is used when getting context
 for a canvas element in a html page:
<canvas id="myCanvas" width="200" height="100"></canvas> 
and in the Javascript code: 
var canvas = document. getElementById("myCanvas"); var ctx = canvas.

here have variable named "canvas" whose job is to clone the contents of 
an element inside the html file having an id of "myCanvas"
we further have created another varaible by the name "ctx";
ctx is asking for everything canvas has; which canvas cloned from myCanvas

CSS Flexbox Layout Module
Before the Flexbox Layout module, there were four layout modes:

Block, for sections in a webpage
Inline, for text
Table, for two-dimensional table data
Positioned, for explicit position of an element
The Flexible Box Layout Module,
 makes it easier to design flexible responsive layout structure without using float or positioning.
 
 div {
  animation-name: example;
  animation-duration: 5s;
  animation-timing-function: linear;
  animation-delay: 2s;
  animation-iteration-count: infinite;
  animation-direction: alternate;
}
  div {
  animation: example 5s linear 2s infinite alternate;
}
  <html>
<head>
<style> 
div {
  width: 100px;
  height: 100px;
  background: red;
  position: relative;
  animation-name: example;
  animation-duration: 3s;  
  animation-delay: 2s;
  animation-fill-mode: both;
}

@keyframes example {
  from {top: 0px; background-color: yellow;}
  to {top: 200px; background-color: blue;}
}
</style>
</head>
<body>

<h1>CSS Animation</h1>

<p>Let the div element get the style values set by the first keyframe before the animation starts, and retain the style values from the last keyframe when the animation ends:</p>

<div></div>

</body>

<html>
<head>
<style> 
div {
  width: 100px;
  height: 100px;
  background-color: red;
  position: relative;
  animation-name: example;
  animation-duration: 5s;
  animation-timing-function: linear;
  animation-delay: 2s;
  animation-iteration-count: infinite;
  animation-direction: alternate;
}

@keyframes example {
  0%   {background-color:red; left:0px; top:0px;}
  25%  {background-color:yellow; left:200px; top:0px;}
  50%  {background-color:blue; left:200px; top:200px;}
  75%  {background-color:green; left:0px; top:200px;}
  100% {background-color:red; left:0px; top:0px;}
}
</style>
</head>
<body>
<iframe src="demo_iframe.htm" name="iframe_a" title="Iframe Example"></iframe>
<p><a href="https://www.w3schools.com" target="iframe_a">W3Schools.com</a></p>

<!DOCTYPE html>
<html>
<body>

<h2>Iframe - Target for a Link</h2>
<iframe src="demo_iframe.htm" name="iframe_a" height="300px" width="100%" title="Iframe Example"></iframe>
<p><a href="https://www.w3schools.com" target="iframe_a">W3Schools.com</a></p>
<p>When the target attribute of a link matches the name of an iframe, the link will open in the iframe.</p>
</body>
</html>

Iframe - Target for a Link
this is the position of the rectangular-frame that displays the website
w3school on the browser for this html file with the heading in h2 tag displayed.
W3Schools.com

When the target attribute of a link matches the name of an iframe, the link will open in the iframe.
The HTML charset Attribute
To display an HTML page correctly, a web browser must know the character set used in the page.

This is specified in the <meta> tag:

<meta charset="UTF-8">
If not specified, UTF-8 is the default character set in HTML.

UTF-8 Characters
Many UTF-8 characters cannot be typed on a keyboard, but they can always be displayed using numbers (called entity numbers):

A is 65
B is 66
C is 67
Example
<!DOCTYPE html>
<html>
<meta charset="UTF-8">
<body>
<p>I will display A B C</p>
<p>I will display &#65; &#66; &#67;</p>
</body>
</html>
<h1>JavaScript Functions</h1>

<p>Call a function which performs a calculation and returns the result:</p>

<p id="demo"></p>

<script>
let x = myFunction(4, 3);
document.getElementById("demo").innerHTML = x;

function myFunction(a, b) {
  return a * b;
}
</script>

JavaScript Functions
Call a function which performs a calculation and returns the result:
12

// Create an Object
const person = {firstName:"John", lastName:"Doe", age:50, eyeColor:"blue"};
This example creates an empty JavaScript object, and then adds 4 properties:

// Create an Object
const person = {};

// Add Properties
person.firstName = "John";
person.lastName = "Doe";
person.age = 50;
person.eyeColor = "blue";
Accessing Object Properties
You can access object properties in two ways:

objectName.propertyName
objectName["propertyName"]
Examples
person.lastName;
person["lastName"];
JavaScript Object Methods
Methods are actions that can be performed on objects.

Methods are function definitions stored as property values.

Property	Property Value
firstName	John
lastName	Doe
age	50
eyeColor	blue
fullName	function() {return this.firstName + " " + this.lastName;}
Example
const person = {
  firstName: "John",
  lastName : "Doe",
  id       : 5566,
  fullName : function() {
    return this.firstName + " " + this.lastName;
  }
};In the example above, this refers to the person object:
this.firstName means the firstName property of person.
this.lastName means the lastName property of person.
In JavaScript, Objects are King.
If you Understand Objects, you Understand JavaScript.
Objects are containers for Properties and Methods.

Properties are named Values.

Methods are Functions stored as Properties.

Properties can be primitive values, functions, or even other objects.

In JavaScript, almost "everything" is an object.

Objects are objects
Maths are objects
Functions are objects
Dates are objects
Arrays are objects
Maps are objects
Sets are objects
All JavaScript values, except primitives, are objects.

JavaScript Primitives
A primitive value is a value that has no properties or methods.

3.14 is a primitive value

A primitive data type is data that has a primitive value.

JavaScript defines 7 types of primitive data types:

string
number
boolean
null
undefined
symbol
bigint
Immutable
Primitive values are immutable (they are hardcoded and cannot be changed).

if x = 3.14, you can change the value of x, but you cannot change the value of 3.14.

Value	Type	Comment
"Hello"	string	"Hello" is always "Hello"
3.14	number	3.14 is always 3.14
true	boolean	true is always true
false	boolean	false is always false
null	null (object)	null is always null
undefined	undefined	undefined is always undefined
JavaScript Objects are Mutable
Objects are mutable: They are addressed by reference, not by value.

If person is an object, the following statement will not create a copy of person:

const x = person;
The object x is not a copy of person. The object x is person.

The object x and the object person share the same memory address.

Any changes to x will also change person:

Example
//Create an Object
const person = {
  firstName:"John",
  lastName:"Doe",
  age:50, eyeColor:"blue"
}

// Create a copy
const x = person;

// Change Age in both
x.age = 10;
Deleting Properties
The delete keyword deletes a property from an object:

Example
const person = {
  firstName: "John",
  lastName: "Doe",
  age: 50,
  eyeColor: "blue"
};

delete person.age;
or delete person["age"];

Nested Objects
Property values in an object can be other objects:

Example
myObj = {
  name:"John",
  age:30,
  myCars: {
    car1:"Ford",
    car2:"BMW",
    car3:"Fiat"
  }
}
You can access nested objects using the dot notation or the bracket notation:

Examples
myObj.myCars.car2;
myObj.myCars["car2"];
myObj["myCars"]["car2"];
let p1 = "myCars";
let p2 = "car2";
myObj[p1][p2];
This example uses the JavaScript toUpperCase() method to convert a text to uppercase:

Example
person.name = function () {
  return (this.firstName + " " + this.lastName).toUpperCase();
};

-->*/
