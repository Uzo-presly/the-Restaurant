* {
  
  box-sizing: border-box;
  scroll-behavior: smooth;
  text-decoration: none;
  font-family: "Inter", sans-serif;
}

@import url("https://fonts.googleapis.com/css2?family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&family=Lobster&display=swap");

html {
  padding: 10px;
}
body {
  background-color: rgba(251, 255, 0, 0.158);
  /* max-width: 1440px; */
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  text-align: center;
}
/* .deliciousBox {
  background-size: cover;
} */
/* inline text for paragraph styling <p style="font-size:48px;" >Foodie Land</p> */
.foodielandText {
  font-family: "Inter", sans-serif;
  font-optical-sizing: auto;
  font-style: normal;
}
.scroller {
  display: none;
}
#chefStatement > h2,
p {
  display: block;
}
.backdrop {
  background-size: contain;
  background-repeat: no-repeat;
  width: 420px;
  height: 320px;
}
nav {
  display: none;
}
ul {
  max-width: fit-content;
  list-style-type: none;
  margin: 0;
  padding: 0;
}
/* inside the LI called dropdown is a hanburger-image displayed as block 
  we are using it to represent our LI for users to see its postion on screen*/
li.dropdown {
  display: inline-block;
}
/* li a:hover, .dropdown:hover .dropbtn {
    background-color: red;
  } */

.dropdown-content {
  display: none;
  position: absolute;
  background-color: #d46e6e;
  max-width: 100px;
  box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.788);
  z-index: 0.5;
}
.dropdown-content a {
  color: rgb(59, 35, 2);
  padding: 5px 5px;
  text-decoration: dashed;
  display: block;
  text-align: right;
} /* when you hover the image representing the LI,
   let dropdown-content display as block */
.dropdown:hover .dropdown-content {
  display: block;
}
.dropdown-content a:hover {
  background-color: #f1f1f1;
}
/* .topSectionContainer:after {
  content: "";
  display: table;
  clear: both;
} */

#healthy {
  background-size: cover;
}
#chefSet {
  display: flex;
  flex-wrap: wrap;
}
.likedByCraig {
  display: block;
  margin-top: 0px;
  max-width: 80%;
  height: 100px;
  background-image: url(./likedByCraig.png);
  background-size: contain;
  background-repeat: no-repeat;
  margin-left:  40px;
}
#checkoutSet > div figure {
  margin: 0px 0px -10px 0px;
  padding: 0px 0px;
  break-inside: avoid;
}
#checkoutSet {
  /* display: block;
  margin: 0px auto;
  max-width: 100%; */
  column-count: 4;
  column-width: 250px;
  column-gap: 3px;
  break-inside: avoid;
}

/* let's add the Break-Inside command
for resizing to avoid slicing the divs 
within the column  */

.forRecipePics {
  background-size: contain;
  background-repeat: no-repeat;
}
#forDelicious {
  width: 100%;
}
#deliciousBoxSection {
  width: 100%;
  border: 0.5px dashed whitesmoke;
  border-radius: 7.5%;
  background-size: cover;
  background-repeat: no-repeat;
}
/* the next settings is for  
when the screen-width is more than 450px,
let the divs in the sections flex
but do not flex the sections yet */
/* @media screen and (max-width: 600px) {
  .HambugerList {
    display: block;
  }
} */
#topsocialLinks a {
  margin: 0px 5px;
}
.clearfix {
  min-height: 150px;
}
#menu {
  width: 50%;
}
#menu {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr 1fr;
}
.footerFirstLine {
  display: flex;
  justify-content: space-between;
  flex-wrap: wrap;
}
#menu {
  width: 50%;
}
#menu {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr 1fr;
}
.footerFirstLine {
  display: flex;
  justify-content: space-between;
  flex-wrap: wrap;
}
#naav {
  width: 70%;
}
#naav {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr 1fr;
}
.naavLine {
  display: flex;
  justify-content: space-between;
  flex-wrap: wrap;
}
#foodielandTextTop {
  width: 110px;
  height: 30px;
  background-image: url(./Foodieland..png);
  background-size: contain;
  background-repeat: no-repeat;
}
.theThreeIcons {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr;
}
.theThreeIconsTop {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr;
  column-gap: 30px;
}
.footerSecondLine {
  display: flex;
  justify-content: space-between;
  flex-wrap: wrap;
}
/* Uzo please let images that have nothing upon them 
be made background images to divs
the divs shall be set to the exact sizes as
shown in the figma */
#foodielandTextBttm {
  width: 110px;
  height: 30px;
  background-image: url(./Foodieland..png);
  background-size: contain;
  background-repeat: no-repeat;
}
#lndnBarge{display: none;}
.insideButtn{ position: relative;left: 300px;}
@media screen and (max-width: 450px) {
  .LandingGrudVersion {
    display: none;
  }
  .gd-container div:nth-child(1) {
    display: none;
  }
  .gd-container div:nth-child(4) {
    display: none;
  }
  #lndnBarge {
    display: none;
  }
  .ite3 {
    width: 100%;
  }
  .fornaav {
    display: none;
  }
 

}

/* let figures in Categorie be given
 a margin-Top of 0px for their tops 
 to be on the same line */

@media screen and (min-width: 450px) {
  body {
    background-color: white;
  }
  .scroller {
    width: 30px;
    height: 300px;
  }
  .HambugerList {
    display: none;
  }
  /* .forNav {
    max-width: 100%;
    background-color: #fff;
    overflow: hidden;
  } */
  /* interestingly, just with column-width alone
  with inline-block, my navv is flexing correctly.
  There was no need for column-count. Wow!Halleluyah!!! */
  /* nav {
    display: inline-block;
    margin: 0px auto;
    max-width: 100%;
    column-width: 100px;
  } */
  /* the contents of Menu are set in columns */
  #menu {
    column-count: 4;
    column-width: 55px;
    column-gap: 2px;
  }
  #topsocialLinks {
    display: none;
  }
  /* we need the containers classed as backdrop 
  to be centralized,WHEN they stand in a column.
  To achieve theis let the container display in block,
  width:50%; margin-Left & margin-right set to Auto; */
  .backdrop {
    display: block;
    background-size: contain;
    background-repeat: no-repeat;
    width: 50%;
    height: 320px;
    margin: 0px auto;
  }
  .LandingPlainVersion {
    display: none;
  }
  .topSectionContainer {
    height: 450px;
  }
  .topSectionContainer:after {
    content: "";
    display: table;
    clear: both;
  }
  /* Uzo, pls take note of the settings of this grid
   container we named (gd-container). Our grid-template-
   columns has auto in four places for FOUR Columns */
  .iteT,
  .ite4 {
    display: none;
  }
  

  .categorie {
    column-count: 6;
    column-width: 150px;
    break-inside: avoid;
  }
  /* so for the fifures of Categorie, do thus */
  .categorie figure {
    margin-top: 0px;
  }
  #gridColumn {
    column-count: 3;
    column-width: 400px;
    column-gap: 1rem;
  }
  #gridColumn > div {
    break-inside: avoid;
    background-size: contain;
    margin-bottom: 10px;
    text-align: center;
    margin: auto;
    width: 50%;
  }
  #gridColumn > div > div > h2 {
    width: 100%; /* margin: auto; */
  }
 

  .checkOut {
    display: grid;
    grid-template-columns:  1fr 1fr;
    background-color: hsba(191, 9%, 99%, 1);
  }
  /* .clearfix {
    height: 300px;
  } */
  #DeiiTry {
    display: grid;
    grid-template-columns: 1fr 1fr;
    column-gap: 10px;
  }
  /* .deliciousRecipe > div h2,
    p {
     width: 100%;
      text-align: center;
      column-span: all;
    }
   */
  #deliciousBoxSection {
    border-radius: 7.5%;
    max-width: 600px;
    height: 300px;
  }
  .footerFirstLine {
    margin: 20px;
    /* width: 100%; */
    display: flex;
    justify-content: space-between;
  }
  .footerFirstLine a {
    margin-right: 10px;
  }
  .footerSecondLine {
    /* width: 70%; */
    display: flex;
    justify-content: space-between;
  }
  .footerSecondLine a {
    margin: 0px 10px;
  }
  .forFooter {
    width: 100%;
  }
  .fornaav {
    width: 100%;
  }
}

footer {
  max-width: 100%;
}
/* Assuming you have floated an image to eihter left or right
you use the Clear and ::After selectore to select the class 
and keep the image from flowing out of the container
Let's assume the P tag and Image share the same class (.clearfix)
.clearfix::after {
  content: "";
  clear: both;
  display: table;
} */
/* now when the minimum the screen can be is
700px; this implies that the screen is bigger
than 700px in width, then our section can flex */
@media screen and (min-width: 950px) {
  #DeiiTry {
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
    column-gap: 20px;
  }
  .forNav {
    max-width: 100%;
    line-height: 35px;
  }
  p,
  h1,
  h2,
  h3,
  h4 {
    font-size: 1.3rem;
  }
  .backdrop {
    background-size: contain;
    background-repeat: no-repeat;
    width: 450px;
    height: 600px;
  }
  .scroller {
    width: 40px;
    height: 400px;
  }
  .gd-container {
    /* height: 50vh; */
    display: grid;
    grid-template-columns: auto auto auto auto;
      
    margin-bottom: 50px;
  }
  /* .ite3 {
    max-width: 700px;
  }
  .ite2 {
    max-width: 700px;
  } */
  #deliciousBoxSection {
    min-width: 900px;
    height: 350px;
    background-size: cover;
  }
  #forDelicious {
    width: 100%;
  }
  #foodielandTextBttm {
    position: relative;
    left: 100px;
  }
  #forInputs {
    width: 100%;
    height: 50px;
    display: inline;
  }
  #forInputs > div > input:nth-last-child(2) {
    width: 40%;
    height: 50px;
    border-color: #f1f1f1;
    margin-bottom: 10px;
    border-top-left-radius: 10px;
    border-bottom-left-radius: 10px;
    border-top-right-radius: 10px;
    border-bottom-right-radius: 10px;
    padding-left: 25px;
  }
  #forInputs > div > input:nth-last-child(1) {
    width: 10%;
    background-color: black;
    color: white;
    height: 40px;
    margin-left: -100px;
    margin-bottom: 10px;
    border-top-left-radius: 10px;
    border-bottom-left-radius: 10px;
    border-top-right-radius: 10px;
    border-bottom-right-radius: 10px;
  }
  .iteT,
  .ite4 {
    display: inline-block;
  }
  .checkOut {
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
    background-color: hsba(191, 9%, 99%, 1);
  }
  /* for the submit button in Delicious box */
  .insideButtn{left: 350px;}
}
  @media screen and (min-width: 1300px) {
    .deliciousRecipeText {
      display: grid;
      grid-template-columns: 1fr 1fr;
      column-gap: 20px;
    }
    .deliciousToBox {
      width: 100%;
      height: 540px;
      margin-bottom: 10px;
    }
    #DeiiTry {
      display: grid;
      grid-template-columns: 1fr 1fr 1fr 1fr;
    }
    .checkOut {
      display: grid;
      grid-template-columns: 1fr 1fr 1fr 1fr;
      background-color: hsba(191, 9%, 99%, 1);
    }
    .insideButtn{left: 450px;}
    #lndnBarge{display: inline-block;}
  }
 

/* nav {
    display: block;
    width: 100%;
    columns: 3;
    column-width: 100px;
  }
  #topsocialLinks {
    display: block;
    column-count: 3;
    column-width: 30px;
  } 

 <style>
 {
  box-sizing: border-box;
}

Create two equal columns that floats next to each other 
.column {
  float: left;
  width: 50%;
  padding: 10px;
  height: 300px;  Should be removed. Only for demonstration 
}

 Clear floats after the columns 
.row:after {
  content: "";
  display: table;
  clear: both;
}

 Responsive layout - makes the two columns stack on top of each other instead of next to each other 
@media screen and (max-width: 600px) {
  .column {
    width: 100%;
  }
}
</style>
</head>
<body>

<h2>Responsive Two Column Layout</h2>
<p>Resize the browser window to see the responsive effect (the columns will stack on top of each other instead of floating next to each other, when the screen is less than 600px wide).</p>

<div class="row">
  <div class="column" style="background-color:#aaa;">
    <h2>Column 1</h2>
    <p>Some text..</p>
  </div>
  <div class="column" style="background-color:#bbb;">
    <h2>Column 2</h2>
    <p>Some text..</p>
  </div>
</div>*/
